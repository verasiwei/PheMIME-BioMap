starting_description = c("Type 2 diabetes", "Diabetic retinopathy", "Hyperlipidemia", "Obesity", "Essential hypertension", "Calculus of kidney", "Depression")
# starting_description = c("other aUPD","overlap v617f aUPD","GGCC/GGCC","GGCC/TCTT")
starting_row = c(73,78,83,95,163,274,118)
# starting_row = c(672,673,674,675)
# Used in data table to both select correct row and navigate table to that row
start_index <- which(phecodes$code %in% starting_code)
ui <- shinyUI(
fluidPage(
# titlePanel(
#   title = "Phe-Omics Multimorbidity Explorer"
# ),
# hr(),
mainPanel(
width = 12,
includeCSS("inst/custom.css"),
shinyjs::useShinyjs(debug = TRUE),
uiOutput("ui")
)
# ,
# skin = 'black'
)
)
server <- function(input, output, session) {
loaded_data <- callModule(
data_loading, "data_loading",session=session
)
output$ui <- renderUI({
no_data <- is.null(loaded_data())
if(no_data){
data_loading_UI('data_loading')
}else{
main_app_UI('main_app')
}
})
observeEvent(loaded_data(), {
all_data <- loaded_data()
app <- callModule(
main_app_Server, "main_app",
current_phecode = all_data$current_phecode,
current_description = all_data$current_description,
current_institution = all_data$current_institution,
# current_data = all_data$current_data,
visualize_network = all_data$visualize_network
)
})
}
shinyApp(ui, server)
source("modules/load_library.R")
source("modules/helpers_func.R")
source("modules/data_loading.R")
# source("modules/multipartite_network_vis_update.R")
source('modules/data_loading_module.R')
source('modules/main_app_module.R')
source('modules/info_panel_module.R')
source('modules/multipartite_network_module.R')
source('modules/shared_info_module.R')
source('modules/upset_plot_module.R')
source("modules/shared_pathways_module.R")
starting_code <- c("250.20","250.70","272.10","278.10","401.10","594.10","296.20")
# starting_code <- c("other aUPD","overlap v617f aUPD","GGCC/GGCC","GGCC/TCTT")
starting_description = c("Type 2 diabetes", "Diabetic retinopathy", "Hyperlipidemia", "Obesity", "Essential hypertension", "Calculus of kidney", "Depression")
# starting_description = c("other aUPD","overlap v617f aUPD","GGCC/GGCC","GGCC/TCTT")
starting_row = c(73,78,83,95,163,274,118)
# starting_row = c(672,673,674,675)
# Used in data table to both select correct row and navigate table to that row
start_index <- which(phecodes$code %in% starting_code)
ui <- shinyUI(
fluidPage(
# titlePanel(
#   title = "Phe-Omics Multimorbidity Explorer"
# ),
# hr(),
mainPanel(
width = 12,
includeCSS("inst/custom.css"),
shinyjs::useShinyjs(debug = TRUE),
uiOutput("ui")
)
# ,
# skin = 'black'
)
)
server <- function(input, output, session) {
loaded_data <- callModule(
data_loading, "data_loading",session=session
)
output$ui <- renderUI({
no_data <- is.null(loaded_data())
if(no_data){
data_loading_UI('data_loading')
}else{
main_app_UI('main_app')
}
})
observeEvent(loaded_data(), {
all_data <- loaded_data()
app <- callModule(
main_app_Server, "main_app",
current_phecode = all_data$current_phecode,
current_description = all_data$current_description,
current_institution = all_data$current_institution,
# current_data = all_data$current_data,
visualize_network = all_data$visualize_network
)
})
}
shinyApp(ui, server)
source("modules/load_library.R")
source("modules/helpers_func.R")
source("modules/data_loading.R")
# source("modules/multipartite_network_vis_update.R")
source('modules/data_loading_module.R')
source('modules/main_app_module.R')
source('modules/info_panel_module.R')
source('modules/multipartite_network_module.R')
source('modules/shared_info_module.R')
source('modules/upset_plot_module.R')
source("modules/shared_pathways_module.R")
starting_code <- c("250.20","250.70","272.10","278.10","401.10","594.10","296.20")
# starting_code <- c("other aUPD","overlap v617f aUPD","GGCC/GGCC","GGCC/TCTT")
starting_description = c("Type 2 diabetes", "Diabetic retinopathy", "Hyperlipidemia", "Obesity", "Essential hypertension", "Calculus of kidney", "Depression")
# starting_description = c("other aUPD","overlap v617f aUPD","GGCC/GGCC","GGCC/TCTT")
starting_row = c(73,78,83,95,163,274,118)
# starting_row = c(672,673,674,675)
# Used in data table to both select correct row and navigate table to that row
start_index <- which(phecodes$code %in% starting_code)
ui <- shinyUI(
fluidPage(
# titlePanel(
#   title = "Phe-Omics Multimorbidity Explorer"
# ),
# hr(),
mainPanel(
width = 12,
includeCSS("inst/custom.css"),
shinyjs::useShinyjs(debug = TRUE),
uiOutput("ui")
)
# ,
# skin = 'black'
)
)
server <- function(input, output, session) {
loaded_data <- callModule(
data_loading, "data_loading",session=session
)
output$ui <- renderUI({
no_data <- is.null(loaded_data())
if(no_data){
data_loading_UI('data_loading')
}else{
main_app_UI('main_app')
}
})
observeEvent(loaded_data(), {
all_data <- loaded_data()
app <- callModule(
main_app_Server, "main_app",
current_phecode = all_data$current_phecode,
current_description = all_data$current_description,
current_institution = all_data$current_institution,
# current_data = all_data$current_data,
visualize_network = all_data$visualize_network
)
})
}
shinyApp(ui, server)
source("modules/load_library.R")
source("modules/helpers_func.R")
source("modules/data_loading.R")
# source("modules/multipartite_network_vis_update.R")
source('modules/data_loading_module.R')
source('modules/main_app_module.R')
source('modules/info_panel_module.R')
source('modules/multipartite_network_module.R')
source('modules/shared_info_module.R')
source('modules/upset_plot_module.R')
source("modules/shared_pathways_module.R")
starting_code <- c("250.20","250.70","272.10","278.10","401.10","594.10","296.20")
# starting_code <- c("other aUPD","overlap v617f aUPD","GGCC/GGCC","GGCC/TCTT")
starting_description = c("Type 2 diabetes", "Diabetic retinopathy", "Hyperlipidemia", "Obesity", "Essential hypertension", "Calculus of kidney", "Depression")
# starting_description = c("other aUPD","overlap v617f aUPD","GGCC/GGCC","GGCC/TCTT")
starting_row = c(73,78,83,95,163,274,118)
# starting_row = c(672,673,674,675)
# Used in data table to both select correct row and navigate table to that row
start_index <- which(phecodes$code %in% starting_code)
ui <- shinyUI(
fluidPage(
# titlePanel(
#   title = "Phe-Omics Multimorbidity Explorer"
# ),
# hr(),
mainPanel(
width = 12,
includeCSS("inst/custom.css"),
shinyjs::useShinyjs(debug = TRUE),
uiOutput("ui")
)
# ,
# skin = 'black'
)
)
server <- function(input, output, session) {
loaded_data <- callModule(
data_loading, "data_loading",session=session
)
output$ui <- renderUI({
no_data <- is.null(loaded_data())
if(no_data){
data_loading_UI('data_loading')
}else{
main_app_UI('main_app')
}
})
observeEvent(loaded_data(), {
all_data <- loaded_data()
app <- callModule(
main_app_Server, "main_app",
current_phecode = all_data$current_phecode,
current_description = all_data$current_description,
current_institution = all_data$current_institution,
# current_data = all_data$current_data,
visualize_network = all_data$visualize_network
)
})
}
shinyApp(ui, server)
View(vertices)
?cutree
View(vertices)
source("modules/load_library.R")
source("modules/helpers_func.R")
source("modules/data_loading.R")
# source("modules/multipartite_network_vis_update.R")
source('modules/data_loading_module.R')
source('modules/main_app_module.R')
source('modules/info_panel_module.R')
source('modules/multipartite_network_module.R')
source('modules/shared_info_module.R')
source('modules/upset_plot_module.R')
source("modules/shared_pathways_module.R")
starting_code <- c("250.20","250.70","272.10","278.10","401.10","594.10","296.20")
# starting_code <- c("other aUPD","overlap v617f aUPD","GGCC/GGCC","GGCC/TCTT")
starting_description = c("Type 2 diabetes", "Diabetic retinopathy", "Hyperlipidemia", "Obesity", "Essential hypertension", "Calculus of kidney", "Depression")
# starting_description = c("other aUPD","overlap v617f aUPD","GGCC/GGCC","GGCC/TCTT")
starting_row = c(73,78,83,95,163,274,118)
# starting_row = c(672,673,674,675)
# Used in data table to both select correct row and navigate table to that row
start_index <- which(phecodes$code %in% starting_code)
ui <- shinyUI(
fluidPage(
# titlePanel(
#   title = "Phe-Omics Multimorbidity Explorer"
# ),
# hr(),
mainPanel(
width = 12,
includeCSS("inst/custom.css"),
shinyjs::useShinyjs(debug = TRUE),
uiOutput("ui")
)
# ,
# skin = 'black'
)
)
server <- function(input, output, session) {
loaded_data <- callModule(
data_loading, "data_loading",session=session
)
output$ui <- renderUI({
no_data <- is.null(loaded_data())
if(no_data){
data_loading_UI('data_loading')
}else{
main_app_UI('main_app')
}
})
observeEvent(loaded_data(), {
all_data <- loaded_data()
app <- callModule(
main_app_Server, "main_app",
current_phecode = all_data$current_phecode,
current_description = all_data$current_description,
current_institution = all_data$current_institution,
# current_data = all_data$current_data,
visualize_network = all_data$visualize_network
)
})
}
shinyApp(ui, server)
library(PheGenHelpers)
library(PheGenHelper)
### This is to use PubMed API to search for the current known shared biological pathways between disease comorbidities/multimorbidities
library(rentrez)
# Create a dataframe of common disease comorbidities/multimorbidities
disease_pairs <- tibble(
disease1 = c("Cardiovascular Disease", "Obesity", "Alzheimer's Disease", "Chronic Obstructive Pulmonary Disease", "Malignant Neoplasms", "Rheumatoid Arthritis", "Chronic Kidney Disease", "Hypertension"),
phecode1 = c("401", "278.1", "290.1", "496", "174", "714", "585", "401.1"),
phenotype1 = c("Essential hypertension", "Overweight and obesity", "Dementia and Alzheimer's disease", "Chronic obstructive pulmonary disease and bronchiectasis", "Malignant neoplasms", "Rheumatoid arthritis", "Chronic renal failure", "Hypertension"),
disease2 = c("Diabetes Mellitus", "Type 2 Diabetes", "Cardiovascular Disease", "Cardiovascular Disease", "Obesity", "Cardiovascular Disease", "Cardiovascular Disease", "Stroke"),
phecode2 = c("250", "250.2", "401", "401", "278.1", "401", "401", "433"),
phenotype2 = c("Diabetes mellitus", "Type 2 diabetes", "Essential hypertension", "Essential hypertension", "Overweight and obesity", "Essential hypertension", "Essential hypertension", "Occlusion of cerebral arteries")
)
View(disease_pairs)
# Create a dataframe of common disease comorbidities/multimorbidities
disease_comorbidities_phecodes <- tibble(
Disease1 = c(
"Cardiovascular Disease", "Obesity", "Alzheimer's Disease", "Chronic Obstructive Pulmonary Disease",
"Malignant Neoplasms", "Rheumatoid Arthritis", "Chronic Kidney Disease", "Hypertension",
"Asthma", "Depression", "Parkinson's Disease", "Psoriasis", "Migraine", "Multiple Sclerosis",
"Type 1 Diabetes", "Hyperlipidemia"
),
Phecode1 = c(
"401", "278.1", "290.1", "496",
"174", "714", "585", "401.1",
"493", "296.2", "332", "696.1", "346", "335",
"250.1", "272.1"
),
Phenotype1 = c(
"Essential hypertension", "Overweight and obesity", "Dementia and Alzheimer's disease", "Chronic obstructive pulmonary disease and bronchiectasis",
"Malignant neoplasms", "Rheumatoid arthritis", "Chronic renal failure", "Hypertension",
"Asthma", "Depressive disorder", "Parkinson's disease", "Psoriasis", "Migraine", "Multiple sclerosis",
"Type 1 diabetes", "Hyperlipidemia"
),
Disease2 = c(
"Diabetes Mellitus", "Type 2 Diabetes", "Cardiovascular Disease", "Cardiovascular Disease",
"Obesity", "Cardiovascular Disease", "Cardiovascular Disease", "Stroke",
"Allergic Rhinitis", "Anxiety Disorders", "Alzheimer's Disease", "Rheumatoid Arthritis", "Fibromyalgia", "Systemic Lupus Erythematosus",
"Celiac Disease", "Coronary Artery Disease"
),
Phecode2 = c(
"250", "250.2", "401", "401",
"278.1", "401", "401", "433",
"477", "300", "290.1", "714", "729.1", "710.2",
"579.0", "411"
),
Phenotype2 = c(
"Diabetes mellitus", "Type 2 diabetes", "Essential hypertension", "Essential hypertension",
"Overweight and obesity", "Essential hypertension", "Essential hypertension", "Occlusion of cerebral arteries",
"Allergic rhinitis", "Anxiety disorder", "Dementia and Alzheimer's disease", "Rheumatoid arthritis", "Fibromyalgia and myofascial pain syndromes", "Systemic lupus erythematosus",
"Celiac disease", "Coronary atherosclerosis"
)
)
# Create a dataframe of common disease comorbidities/multimorbidities
disease_pairs <- tibble(
disease1 = c(
"Cardiovascular Disease", "Obesity", "Alzheimer's Disease", "Chronic Obstructive Pulmonary Disease",
"Malignant Neoplasms", "Rheumatoid Arthritis", "Chronic Kidney Disease", "Hypertension",
"Asthma", "Depression", "Parkinson's Disease", "Psoriasis", "Migraine", "Multiple Sclerosis",
"Type 1 Diabetes", "Hyperlipidemia"
),
phecode1 = c(
"401", "278.1", "290.1", "496",
"174", "714", "585", "401.1",
"493", "296.2", "332", "696.1", "346", "335",
"250.1", "272.1"
),
phenotype1 = c(
"Essential hypertension", "Overweight and obesity", "Dementia and Alzheimer's disease", "Chronic obstructive pulmonary disease and bronchiectasis",
"Malignant neoplasms", "Rheumatoid arthritis", "Chronic renal failure", "Hypertension",
"Asthma", "Depressive disorder", "Parkinson's disease", "Psoriasis", "Migraine", "Multiple sclerosis",
"Type 1 diabetes", "Hyperlipidemia"
),
disease2 = c(
"Diabetes Mellitus", "Type 2 Diabetes", "Cardiovascular Disease", "Cardiovascular Disease",
"Obesity", "Cardiovascular Disease", "Cardiovascular Disease", "Stroke",
"Allergic Rhinitis", "Anxiety Disorders", "Alzheimer's Disease", "Rheumatoid Arthritis", "Fibromyalgia", "Systemic Lupus Erythematosus",
"Celiac Disease", "Coronary Artery Disease"
),
phecode2 = c(
"250", "250.2", "401", "401",
"278.1", "401", "401", "433",
"477", "300", "290.1", "714", "729.1", "710.2",
"579.0", "411"
),
phenotype2 = c(
"Diabetes mellitus", "Type 2 diabetes", "Essential hypertension", "Essential hypertension",
"Overweight and obesity", "Essential hypertension", "Essential hypertension", "Occlusion of cerebral arteries",
"Allergic rhinitis", "Anxiety disorder", "Dementia and Alzheimer's disease", "Rheumatoid arthritis", "Fibromyalgia and myofascial pain syndromes", "Systemic lupus erythematosus",
"Celiac disease", "Coronary atherosclerosis"
)
)
# Perform a PubMed Search
query = paste0("shared biological pathways between ",disease_pairs$disease1," and ", "disease_pairs$disease2")
query
# Perform a PubMed Search
query = paste0("shared biological pathways between ",disease_pairs$disease1," and ", disease_pairs$disease2)
query
search_results <- entrez_search(db="pubmed", term=query, retmax=10)
search_results = purrr::map(query_list,function(x) {entrez_search(db="pubmed", term=x, retmax=10)})
# Perform a PubMed Search
query_list = paste0("shared biological pathways between ",disease_pairs$disease1," and ", disease_pairs$disease2)
search_results = purrr::map(query_list,function(x) {entrez_search(db="pubmed", term=x, retmax=10)})
View(search_results)
search_results[[1]]
# Fetch Article Summaries
article_ids <- search_results[[1]]$ids
summaries <- entrez_summary(db="pubmed", id=article_ids)
View(summaries)
search_results = purrr::map(query_list,function(x) {
res = entrez_search(db="pubmed", term=x, retmax=10)
# Fetch Article Summaries
summary =  entrez_summary(db="pubmed", id=res$ids)
# extract abstract
abstract = summary$abstract
})
View(search_results)
x=query_list[1]
res = entrez_search(db="pubmed", term=x, retmax=10)
# Fetch Article Summaries
summary =  entrez_summary(db="pubmed", id=res$ids)
View(summary)
# extract abstract
abstracts <- sapply(summary, function(x) x$abstract)
View(abstracts)
summary$abstract
# Fetch Article Summaries
summary =  entrez_fetch(db="pubmed", id=res$ids,rettype = "abstract")
summary
getwd()
# Perform a PubMed Search
search_results = purrr::map2(disease_pairs$disease1,disease_pairs$disease2,function(x,y) {
query = paste0("shared biological pathways between ",x," and ", y)
res = entrez_search(db="pubmed", term=query, retmax=10)
# Fetch Article Summaries
summary =  entrez_fetch(db="pubmed", id=res$ids,rettype = "abstract")
# extract abstract
abstracts <- sapply(summary, function(x) x$abstract)
if (!is.null(abstracts)) {
writeLines(abstracts, paste0("test/query/abstracts_", x, "_", y, ".txt"))
}
})
x=disease_pairs$disease1
x=disease_pairs$disease1[1]
y=disease_pairs$disease2[1]
query = paste0("shared biological pathways between ",x," and ", y)
res = entrez_search(db="pubmed", term=query, retmax=10)
# Fetch Article Summaries
summary =  entrez_fetch(db="pubmed", id=res$ids,rettype = "abstract")
# extract abstract
abstracts <- sapply(summary, function(x) x$abstract)
abstracts
summary
length(summary)
# Perform a PubMed Search
search_results = purrr::map2(disease_pairs$disease1,disease_pairs$disease2,function(x,y) {
query = paste0("shared biological pathways between ",x," and ", y)
res = entrez_search(db="pubmed", term=query, retmax=10)
# Fetch Article Summaries
abstracts =  entrez_fetch(db="pubmed", id=res$ids,rettype = "abstract")
if (!is.null(abstracts)) {
writeLines(abstracts, paste0("test/query/abstracts_", x, "_", y, ".txt"))
}
})
setwd("~/paper_draft_prepare/omics_multimorbidity/vignettes")
rmarkdown::render_site()
setwd("~/paper_draft_prepare/omics_multimorbidity")
# Use reticulate to call a Python script for NER on the saved abstracts
source_python("inst/extract_pathways.py")
library(reticulate)
# Use reticulate to call a Python script for NER on the saved abstracts
source_python("inst/extract_pathways.py")
# Use reticulate to call a Python script for NER on the saved abstracts
source_python("inst/extract_pathways.py")
# Use reticulate to call a Python script for NER on the saved abstracts
source_python("inst/extract_pathways.py")
# Use reticulate to call a Python script for NER on the saved abstracts
source_python("inst/extract_pathways.py")
# Use reticulate to call a Python script for NER on the saved abstracts
source_python("inst/extract_pathways.py")
# Use reticulate to call a Python script for NER on the saved abstracts
source_python("inst/extract_pathways.py")
import spacy
reticulate::repl_python()
# Use reticulate to call a Python script for NER on the saved abstracts
source_python("inst/extract_pathways.py")
# Define a function in R to read the results from the Python script and create a dataframe
extract_pathways_r <- function(file_path) {
pathways <- extract_pathways(file_path)
return(pathways)
}
# Loop through the files and extract shared biological pathways
query_res = purrr::map2_dfr(disease_pairs$disease1,disease_pairs$disease2,function(x,y){
file_path <- paste0("abstracts_", x, "_", y, ".txt")
shared_pathways <- extract_pathways_r(file_path)
data.frame(disease1 = x, disease2=y, shared_pathways=shared_pathways)
})
x
y
file_path <- paste0("abstracts_", x, "_", y, ".txt")
file_path <- paste0("test/query/abstracts_", x, "_", y, ".txt")
shared_pathways <- extract_pathways_r(file_path)
shared_pathways
reticulate::repl_python()
# Use reticulate to call a Python script for NER on the saved abstracts
source_python("inst/extract_pathways.py")
# Define a function in R to read the results from the Python script and create a dataframe
extract_pathways_r <- function(file_path) {
pathways <- extract_pathways(file_path)
return(pathways)
}
file_path <- paste0("test/query/abstracts_", x, "_", y, ".txt")
shared_pathways <- extract_pathways_r(file_path)
shared_pathways
# Loop through the files and extract shared biological pathways
query_res = purrr::map2_dfr(disease_pairs$disease1,disease_pairs$disease2,function(x,y){
file_path <- paste0("test/query/abstracts_", x, "_", y, ".txt")
shared_pathways <- extract_pathways_r(file_path)
data.frame(disease1 = x, disease2=y, shared_pathways=shared_pathways)
})
View(query_res)
reticulate::repl_python()
